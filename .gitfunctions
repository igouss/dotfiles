#!/bin/bash


#Log with visual tree
function log {
    #git log --topo-order --decorate --graph --oneline --all
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
}

# flat log
function logf {
  git log --topo-order --decorate --first-parent --oneline --all
}

# Display Current branch
function current_branch { 
    ref=$(git symbolic-ref HEAD 2> /dev/null)
    echo ${ref#refs/heads/} 
}

function rollsoft {
    log
    read -e -p "Enter rev: " rev
    git reset --soft ${rev}
}
 
function rollhard {
    log
    read -e -p "Enter rev: " rev
    git reset --hard ${rev}
}

function gitRemote {
    select REMOTEREPO in `git remote`; do echo $opt; break; done
}

function gitBranch {
    select BRANCH in `git branch -a | cut -c3- | paste -s -`; do break; done
}


# marge current branch to another
function merge_to { 
    branch=`eval current_branch`
    git checkout "${@}" && git merge ${branch}
}

# execute git command with REMOTEREPO BRANCH substituted in arg0
function gitExecuteRH {
    select REMOTEREPO in `git remote`; do echo $opt; break; done
    select BRANCH in `git branch -a | cut -c3- | paste -s -`; do break; done
    eval ${1}
    unset REMOTEREPO BRANCH
}

# execute git command with BRANCH substituted in arg0
function gitExecuteB {
    select BRANCH in `git branch -a | cut -c3- | paste -s -`; do break; done
    eval ${1}
    unset BRANCH
}


# execute git command with REMOTEREPO substituted in arg0
function gitExecuteR {
    select REMOTEREPO in `git remote`; do echo $opt; break; done
    eval ${1}
    unset REMOTEREPO
}

#function pull {
#    gitExecuteRH 'git pull -v --stat --rebase ${REMOTEREPO} ${BRANCH}'
#}

# first do dry run
# then ask for source and for target branch name
function push {
    select REMOTEREPO in `git remote`; do echo $opt; break; done
    select BRANCH in `git branch | cut -c3- | paste -s -`; do break; done
    read -e -p "remote brunch name: " remoteBrunch
    if [ -z "${remoteBrunch}" ]
    then
        remoteBrunch=${BRANCH}
    fi
    git push --dry-run ${REMOTEREPO} ${BRANCH}:${remoteBrunch}
    unset ${REMOTEREPO} ${BRANCH} ${remoteBrunch}
}

function delrem {
    gitExecuteRH 'git push ${REMOTEREPO} :heads/${BRANCH}'
}

function delloc {
    select BRANCH in `git branch | cut -c3- | paste -s -`; do break; done
    git branch -D ${BRANCH}
    unset BRANCH
}

# create an empty branch see http://gitcasts.com/posts/empty-branches                                                   
function git_empty_branch
{
    git-symbolic-ref HEAD refs/heads/$1
    rm .git/index
    git clean -fdx
    git commit --allow-empty -m "initial branch commit"
}

function merge
{
    gitExecuteRH 'git pull ${REMOTEREPO} ${BRANCH} && git merge --no-ff ${BRANCH}'
}

# download remote
function fetch {
   gitExecuteR 'git fetch -v -u ${REMOTEREPO}'
}

function merge {
    gitExecuteB 'git merge --no-ff ${BRANCH}'
}
