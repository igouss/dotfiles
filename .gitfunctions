#!/bin/bash

# Show usefull git commands minus private functions
function gits {
    echo "init    - create git repo in current directory add and commit all files in it"
    echo "push     - push current branch to remote repo"
    echo "pull     - pull from remote repo"
    echo "ci       - commit files stages in index to repository"
    echo "merge_to - merge current branch to (arg)"
    echo "merge    - merge with remote branch"
    echo "cii      - commit interactively"
    echo "st       - git status of uncommited, changed and stages files"
    echo "stt      - Show only names and status of changed files"
    echo "dfwi     - diff working dir and index"
    echo "dfir     - diff index and HEAD"
    echo "dfwh     - diff working dir and HEAD"
    echo "add      - add all files to index"
    echo "addp     - select what to add to index"
    echo "push?    - selectively push what to commit"
    echo "rebase   - interactive rebase"
    echo "resolve  - continue after finished resolving the conflict manually"
    echo "rollhard - return the entire working tree to the last committed state"
    echo "rollsoft - revert the commit, put the committed changes back into index"
    echo "revi     - revert to index (arg:File)"
    echo "revh     - revert to head (arg:File)"
    echo "co       - checkout branch"
    echo "unadd      - removes file fron index"
    echo "last     - show last commit"
    echo "modified - show modified files"
    echo "show-untracked"
    echo "delete-untracked"
    echo "log      - log with visual tree"
    echo "logf     - flat log"
    echo "reset    -"
    echo "grm      -"
#    echo "append   - add to last unpushed commit"
    echo "conflict -"
    echo "geb      -"
}


function uncommit {
  git reset --soft HEAD^
}

function recommit {
  git commit -c ORIG_HEAD
}

# switch branches
function co {
  git checkout $1
}

#git status of uncommited, changed and stages files
function st {
  git status -u
}


#remove file from index
function unadd {
  git rm --cached $1
}
#Show only names and status of changed files
function stt {
  git diff --name-status -r
}

#Log with visual tree
function log {
    #git log --topo-order --decorate --graph --oneline --all
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
}

# flat log
function logf {
  git log --topo-order --decorate --first-parent --oneline --all
}

# Display Current branch
function current_branch { 
    ref=$(git symbolic-ref HEAD 2> /dev/null)
    echo ${ref#refs/heads/} 
}


function rollsoft {
    log
    read -e -p "Enter rev: " rev
    git reset --soft ${rev}
}
 
function rollhard {
    log
    read -e -p "Enter rev: " rev
    git reset --hard ${rev}
}

function gitRemote {
    select REMOTEREPO in `git remote`; do echo $opt; break; done
}

function gitBranch {
    select BRANCH in `git branch -a | cut -c3- | paste -s -`; do break; done
}


# marge current branch to another
function merge_to { 
    branch=`eval current_branch`
    git checkout "${@}" && git merge ${branch}
}

# execute git command with REMOTEREPO BRANCH substituted in arg0
function gitExecuteRH {
    select REMOTEREPO in `git remote`; do echo $opt; break; done
    select BRANCH in `git branch -a | cut -c3- | paste -s -`; do break; done
    eval ${1}
    unset REMOTEREPO BRANCH
}

# execute git command with BRANCH substituted in arg0
function gitExecuteB {
    select BRANCH in `git branch -a | cut -c3- | paste -s -`; do break; done
    eval ${1}
    unset BRANCH
}


# execute git command with REMOTEREPO substituted in arg0
function gitExecuteR {
    select REMOTEREPO in `git remote`; do echo $opt; break; done
    eval ${1}
    unset REMOTEREPO
}

#function pull {
#    gitExecuteRH 'git pull -v --stat --rebase ${REMOTEREPO} ${BRANCH}'
#}

# first do dry run
# then ask for source and for target branch name
function push {
    select REMOTEREPO in `git remote`; do echo $opt; break; done
    select BRANCH in `git branch | cut -c3- | paste -s -`; do break; done
    read -e -p "remote brunch name: " remoteBrunch
    if [ -z "${remoteBrunch}" ]
    then
        remoteBrunch=${BRANCH}
    fi
    git push ${REMOTEREPO} ${BRANCH}:${remoteBrunch}
    unset ${REMOTEREPO} ${BRANCH} ${remoteBrunch}
}

function delrem {
    gitExecuteRH 'git push ${REMOTEREPO} :heads/${BRANCH}'
}

function delloc {
    select BRANCH in `git branch | cut -c3- | paste -s -`; do break; done
    git branch -D ${BRANCH}
    unset BRANCH
}

# create an empty branch see http://gitcasts.com/posts/empty-branches                                                   
function git_empty_branch
{
    git-symbolic-ref HEAD refs/heads/$1
    rm .git/index
    git clean -fdx
    git commit --allow-empty -m "initial branch commit"
}

# download remote
function fetch {
   gitExecuteR 'git fetch -v -u ${REMOTEREPO}'
}

function merge {
    gitExecuteB 'git merge ${BRANCH}'
}

# deff between branch and head
function dfwh {
    gitExecuteR 'git diff ${BRANCH}..head'
}

# remove all files or specified file from git index
function unstage {
  git reset HEAD $1
}


# discard changed all changes or specified file but making working directory same as head
function discard {
  git checkout -- $1
}


function ci {
# stage changes (cached commit)
#  git commit -a -v --edit -m "$1"
  git commit -v --edit -m "$1"

}

function cii {
  git commit -v  --interactive
}
